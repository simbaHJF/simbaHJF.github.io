---
layout:     post
title:      "操作系统内存管理"
date:       2019-06-11 22:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - OS

---


### 连续分配存储管理方式
为了能将用户程序装入内存,必须为它分配一定大小的内存空间.连续分配方式是最早出现的一种存储器分配方式.该分配方式为一个用户程序分配一个连续的内存空间,即程序中代码或数据的逻辑地址相邻,体现在内存空间分配时物理地址的相邻.


### 虚拟内存地址
当我们需要在系统中同时运行多道程序时,无法保证某道程序加载在固定的内存段上,也就不能固定程序在内存的加载位置和指令在内存中的绝对地址.
为解决此问题,在内存中找到一段连续的内存空间,将其分配给装载的程序,然后把这段物理内存空间地址和整个程序指令的指定地址做一个映射.物理地址对于进程不可见,操作系统给进程分配一个虚拟地址.所有进程看到的这个地址都是一样的,在程序里面指令的地址都是虚拟地址,当程序要访问虚拟地址的时候,由内核的数据结构进行转换,转换成不同的物理地址.
我们把程序中指令用到的内存地址叫做虚拟内存地址,实际在内存硬件里面的空间地址,叫做物理内存地址.


### 内存交换(Swapping)
连续分配存储管理方式和虚拟内存地址的结合解决了最初的内存分配问题,但也存在明显的不足,第一个就是内存碎片问题.
例如,我们当前有一台电脑,内存为1GB.我们首先启动一个图形渲染程序,占用512MB内存;接着启动一个Chrome浏览器,占用128MB内存;再启动一个Python程序,占用256MB内存.这时,关掉Chrome,于是空闲内存还有256MB.按理来说,我们有足够的内存空间装在一个200MB的程序.但是,这256MB的内存空间不是连续的,而是被分成了两段128MB的内存.导致那200MB的程序无法被加载进来.
解决上述问题的办法,我们称之为内存交换.
我们可以把Python程序占用的那256MB内存写到硬盘上,然后再从硬盘上读回来到内存里面.不过读回来的时候,不再把它加载到原来的位置,而是紧跟在那已被占用的512MB内存后面.这样就有了256MB的连续内存空间,可以去加载一个新的200MB的程序.如果你自己安装过linux操作系统,你应该遇到过分配一个swap硬盘分区的问题.这块分出来的磁盘空间,其实就是专门给linux操作系统进行内存交换用的.
内存交换不仅用在上述场景中,还可应用于下面这种情况:一方面,在内存中的某些进程由于某件事尚未发生而被阻塞运行,但它却占用了大量的内存空间,甚至阻塞其他进程;另一方面,却又有许多作业,因为内存空间不足,一直驻留在外存上,而不能进入内存运行.显然这是对系统资源的严重浪费,使视同吞吐量下降.这个问题,也可通过内存交换解决,把内存中暂时不能运行的进程或暂时不用的程序和数据换出到外存,以便腾出足够的内存空间,再把已具备运行条件的进程或进程所需要的程序和数据换入内存.