---
layout:     post
title:      "mysql索引"
date:       2019-06-17 13:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - mysql

---

> 极客时间--丁奇--mysql实战 学习笔记

##	索引的常见类型
1.	哈希表	一种键-值(key-value)存储数据的结构,当key发生哈希碰撞时,通常采用链地址法解决.
哈希索引做区间查询的速度是很慢的,哈希表这种结构适用于只有等值查询的场景.

2.	有序数组	有序数组在等值查询和范围查询场景中的性能读非常优秀.但是,在需要更新数据的时候就很麻烦,往中间插入一个记录就必须得挪动后面所有的记录,成本太高.
所以,有序数组索引只适用于静态存储引擎.比如要保存2017年某个城市的所有人口信息,这类不会再修改的数据.

3.	二叉搜索树	为了维持O(log(N))的查询复杂度,就需要保持这棵树是平衡二叉树,这就造成了更新的复杂性.
另外,假设有一个100万节点的平衡二叉树,树高20.一次查询可能需要访问20个数据块.在机械硬盘时代,从磁盘随机读一个数据块需要10ms左右的寻址时间.也就是说,对于一个100万行的表,如果使用二叉树来存储,单独访问一个行可能需要20个10ms的时间,这个查询是很慢的.
为了让一个查询尽量少地读磁盘,就必须让查询过程访问尽量少的数据块.那么,我们就不应该使用二叉树,而是要使用"N叉"树.


以InnoDB的一个整数字段索引为例,这个N差不多是1200.这棵树高是4的时候,就可以存1200的3次方个值,大约17亿.考虑到树根的数据块总是在内存中的,一个10亿行的表上的一个整数字段索引,查找一个值最多只需要访问3次磁盘.其实,树的第二层也有很大概率在内存中,那么访问磁盘的平均次数就更少了.

##	B树和B+树




##	MySQL InnoDB索引
MySQL中InnoDB存储引擎使用B+树作为索引模型.引擎中表根据主键顺序以索引的形式存放,这种存储方式的表称为索引组织表.
索引类型分为主键索引和非主键索引.主键索引的叶子节点存放的是整行数据,主键索引也被称为聚簇索引;非主键索引的叶子节点存放的是主键的值和索引键值,非主键索引也被称为二级索引.

假设现在有表:

```
mysql> create table T(
id int primary key, 
k int not null, 
m int not null,
name varchar(16),
index (k)
)engine=InnoDB;
```

表中R1~R5的(ID,k)值分别为(100,1),(200,2),(300,3),(500,5),(600,6),两棵树的示例示意图如下:
[![njR2kT.png](https://s2.ax1x.com/2019/09/20/njR2kT.png)](https://imgchr.com/i/njR2kT)
根据上面的索引结构,我们来看一下:基于主键索引和普通索引的查询有什么区别
*	如果语句是 select * from T where ID = 500,即主键查询方式,则只需要搜索ID这棵B+树;
*	如果语句是 select * from T where k = 5,即普通索引查询方式,则需要先搜索k索引树,得到ID的值为500,再到ID索引树搜索一次.这个过程称为回表.

也就是说,基于非主键索引的插叙你需要多扫描一棵索引树,效率没有主键索引高.当然,也存在这样的场景,就是需要根据非主键索引字段进行查询,且不需要返回整行数据,比如上面的表中非主键索引为(k,m),查询语句为:select k,m from T where k = 10,此时非主键索引中包含了要查询的所有字段值,就不会再做回表操作,这种查询方式称为覆盖索引.