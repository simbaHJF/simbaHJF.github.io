---
layout:     post
title:      "LINUX 地址空间"
date:       2019-11-26 20:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - linux

---

**针对32位Linux操作系统**

##	内核地址空间划分

通常32位Linux内核地址空间划分,0 ~ 3 G为用户空间,3 ~ 4 G为内核空间.**注意这里是32位内核地址空间划分,64位内核地址空间划分是不同的.**

![QSRgkq.png](https://s2.ax1x.com/2019/11/26/QSRgkq.png)

##	Linux内核高端内存

当内核模块代码或线程访问内存时,代码中的内存地址都为逻辑地址,而对应到真正的物理内存地址,需要地址一对一的映射,如逻辑地址0xc0000003对应的物理地址为0x3,0xc0000004对应的物理地址为0x4等,逻辑地址与物理地址对应的关系为:<br>

`
物理地址 = 逻辑地址 – 0xC0000000
`

假如按照上述简单的地址映射关系,那么内核逻辑地址空间访问为0xc0000000 ~ 0xffffffff,那么对应的物理内存范围就为0x00000000 ~ 0x40000000,即只能访问1G物理内存.若机器中安装4G物理内存,那么内核就只能访问前1G物理内存,后面3G物理内存将会无法访问,因为内核的地址空间已经全部映射到物理内存地址范围0x00000000 ~ 0x40000000.即使有4G物理内存,那么物理地址0×40000001及其以后的内存你讲无法访问.<br>

因此,显然不能将内核地址空间0xc0000000 ~ 0xfffffff全部用来简单的地址映射.因此x86架构中将内核地址空间划分三部分:ZONE_DMA, ZONE_NORMAL和 ZONE_HIGHMEM.ZONE_HIGHMEM即为高端内存,这就是高端内存概念的由来.<br>

在x86架构中,三种类型的区域如下:

名称 | 范围 |
-|-|
ZONE_DMA | 内存开始的16MB |
ZONE_NORMAL | 16MB~896MB |
ZONE_HIGHMEM | 896MB ~ 结束 |


高端内存HIGH_MEM地址空间范围为0xF8000000~0xFFFFFFFF(896MB ~ 1024MB).那么内核是如何借助128MB高端内存地址空间来实现访问所有物理内存的呢?<br>

当内核想访问高于896MB物理地址内存时,从0xF8000000 ~ 0xFFFFFFFF地址空间范围内找一段相应大小空闲的逻辑地址空间,借用一会.借用这段逻辑地址空间,建立映射到想访问的哪段物理内存,用完后归还.这样别人也可以借用这段地址空间访问其他物理内存,实现了使用有限的地址空间,访问所有物理内存.

![QS5CM8.png](https://s2.ax1x.com/2019/11/26/QS5CM8.png)

例如内核向访问2G开始的一段大小为1MB的物理内存,即物理地址范围为0×80000000 ~ 0x800FFFFF.访问之前先找到一段1MB大小的空闲地址空间,假设找到的空闲地址空间为0xF8700000 ~ 0xF87FFFFF,用这1MB的逻辑地址空间映射到物理地址空间0×80000000 ~ 0x800FFFFF的内存.映射关系如下:

逻辑地址 | 物理地址 |
- | - |
0xF8700000 | 0x80000000 |
0xF8700001 | 0x80000001 |
0xF87FFFFF | 0x800FFFFF |


```
当内核访问完0×80000000 ~ 0x800FFFFF物理内存后,
就将0xF8700000 ~ 0xF87FFFFF内核线性空间释放.
这样其他进程或代码也可以使用0xF8700000 ~ 0xF87FFFFF这段地址访问其他物理内存.
```

高端内存的最基本思想:借一段地址空间,建立临时地址映射,用完后释放,达到这段地址空间可以循环使用,访问所有物理内存的目的.<br>

万一有内核进程或模块一直占用某段高端地址不释放怎么办?<br>
若真的出现这种情况,则内核的高端内存地址空间越来越紧张,若都被占用不释放,则没有建立映射到物理内存的,就都无法访问了.

