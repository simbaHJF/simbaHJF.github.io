---
layout:     post
title:      "消息队列--事务消息"
date:       2019-10-26 20:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - MQ

---

> 极客时间--李玥--消息队列高手课 学习笔记

##	消息队列实现分布式事务

事务消息需要消息队列提供相应的功能才能实现,Kafka和RocketMQ都提供了事务相关功能.

以订单和购物车系统为例,看如何应用消息队列来实现事务消息:
![KDJxx0.jpg](https://s2.ax1x.com/2019/10/26/KDJxx0.jpg)

首先,订单系统在消息队列上开启一个事务.然后订单系统给消息服务器发送一个"半消息",这个半消息不是说消息内容不完整,它包含的内容就是完整的消息内容,半消息和普通消息的唯一区别是,在事务提交之前,对于消费者来说,这个消息是不可见的.

半消息发送成功后,订单系统就可以执行本地事务了,在订单库中创建一条订单记录,并提交订单库的数据库事务.然后根据本地事务的执行结果决定提交或者回滚事务消息.如果订单创建成功,那就提交事务消息,购物车系统就可以消费到这条消息继续后续的流程.如果订单创建失败,那就回滚事务消息,购物车系统就不会收到这条消息.这样就实现了"要么都成功,要么都失败"的一致性要求.

这里在第4步发送提交或回滚事务消息时,如果失败了,Kafka和RocketMQ给出了2中不同的解决方案.

Kafka的解决方式比较简单粗暴,直接抛出异常,让用户自行处理.我们可以在业务代码中反复重试提交,直到提交成功,或者删除之前创建的订单进行补偿.RocketMQ则给出了另一种解决方案.

##	RocketMQ中的分布式事务实现

在RocketMQ中的事务实现中,增加了事务反查的机制来解决事务消息提交失败的问题.如果Producer也就是订单系统,在提交或者回滚事务消息时发生网络异常,RocketMQ的Broker没有收到提交或者回滚的请求,Broker会定期去Producer上反查这个事务对应的本地事务的状态,然后根据反查结果决定提交或者回滚这个事务.

为了支持这个事务反查机制,我们的业务代码需要实现一个反查本地事务状态的接口,告知RocketMQ本地事务是成功还是失败.

在这个例子中,反查本地事务的逻辑很简单,只要根据消息中的订单ID,在订单库中插叙你这个订单是否存在即可,如果订单存在则返回成功,否则返回失败.RocketMQ会自动根据事务反查的结果提交或者回滚事务消息.

这个反查本地事务的实现,并不依赖消息的发送方,也就是订单服务的某个实例节点上的任何数据.这种情况下,即使是发送事务消息的那个订单服务节点宕机了,RocketMQ依然可以通过其他订单服务的节点来执行反查,确保事务的完整性.

综合上面讲的通用事务消息的实现和RocketMQ的事务反查机制,使用RocketMQ事务消息功能实现分布式事务的流程如下图:
![KDdRIS.jpg](https://s2.ax1x.com/2019/10/26/KDdRIS.jpg)