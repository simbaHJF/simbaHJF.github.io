---
layout:     post
title:      "分布式系统--CAP"
date:       2019-11-27 16:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - 分布式

---

> Reference: <br/>
	阮一峰的博客<br/>
	从Paxos到Zookeeper分布式一致性原理与实践


##	分布式系统的三个指标

![Q95Xm8.jpg](https://s2.ax1x.com/2019/11/27/Q95Xm8.jpg)

1998年,加州大学的计算机科学家Eric Brewer提出,分布式系统有三个指标.

>
*	Consistency
*	Availability
*	Partition tolerance

它们的第一个字母分别是C,A,P.<br>
Eric Brewer说,这三个指标不可能同时做到,这个结论就叫做CAP定理.


##	Partition tolerance

先看 Partition tolerance,中文叫做"分区容错".<br>
大多数分布式系统都分布在多个子网络.每个子网络就叫做一个区(partition).分区容错的意思是,区间通信可能失败.比如,一台服务器放在中国,另一台服务器放在美国,这就是两个区,他们之间可能无法通信.

![Q9oeDf.png](https://s2.ax1x.com/2019/11/27/Q9oeDf.png)

上图中,G1和G2是两台跨区的服务器.G1向G2发送一条消息,G2可能无法收到.系统设计的时候,必须考虑到这种情况.<br>
一般来说,分区容错无法避免,因此可以认为CAP的P总是成立.CAP定理告诉我们,剩下的C和A无法同时做到.


##	Consistency

Consistency的中文叫做"一致性".意思是,写操作之后的读操作,必须返回该值.举例来说,某条记录是v0,用户向G1发起一个写操作,将其改为v1.

![Q9TFdU.png](https://s2.ax1x.com/2019/11/27/Q9TFdU.png)

接下来,用户的读操作就会得到v1.这就叫一致性.

![Q9TnQ1.png](https://s2.ax1x.com/2019/11/27/Q9TnQ1.png)

问题是,用户有可能向G2发起读操作,由于G2的值没有发生变化,因此返回的是v0. G1和G2读操作的结果不一致,这就不满足一致性了.

![Q9TUyt.png](https://s2.ax1x.com/2019/11/27/Q9TUyt.png)

为了让G2也能变为v1,就要在G1写操作的时候,让G1向G2发送一条消息,要求G2也改成v1.

![Q9TIkF.png](https://s2.ax1x.com/2019/11/27/Q9TIkF.png)

这样的话,用户向G2发起读操作,也能得到v1.

![Q9TzkD.png](https://s2.ax1x.com/2019/11/27/Q9TzkD.png)


##	Availability

Availability中文叫做"可用性",可用性是指系统提供的服务必须一直处于可用状态,对于用户的每一个操作请求总是能够在有限的时间内返回结果.  
"有限的时间内"是指,对于用户的一个操作请求,系统必须能够在指定的时间内返回对应的处理结果,如果超过了这个时间范围,那么系统就被认为是不可用的.  

"返回结果"是指,它要求系统在完成对用户请求的处理后,返回一个正常的响应结果.正常的响应结果通常能够明确地反映出对请求的处理结果,即成功或失败,而不是一个让用户感到困惑的返回结果.  

用户可以选择向G1或G2发起读操作.不管是哪台服务器,只要收到请求,就必须告诉用户,到底是v0还是v1,否则就不满足可用性.



##	Consistency 和 Availability 的矛盾

一致性和可用性,为什么不可能同时成立?答案很简单,因为可能通信失败(即出现分区容错).<br>

如果保证G2的一致性,那么G1必须在写操作时,锁定G2的读操作和写操作.只有数据同步后,才能重新开放读写.锁定期间,G2不能读写,也就没有可用性.<br>

如果保证G2的可用性,那么势必不能锁定G2,所以一致性不成立.<br>

综上所述,G2无法同时做到一致性和可用性.系统设计时只能选择一个目标.如果追求一致性,那么无法保证所有节点的可用性;如果追求所有节点的可用性,那就没法做到一致性.<br>

