---
layout:     post
title:      "分布式系统--2PC与3PC"
date:       2020-03-07 20:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - 分布式

---


> Reference: <br>
	从Paxos到Zookeeper分布式一致性原理与实践

在分布式系统中,每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败,但却无法直接获取到其他分布式节点的操作结果.因此,当一个事务操作需要跨越多个分布式节点的时候,为了保持事务处理的ACID特性,就需要引入一个称为"协调者(Coordinator)"的组件来统一调度所有分布式节点的执行逻辑,这些被调度的分布式节点则被称为"参与者(Participant)".协调者负责调度参与者的行为,并最终决定这些参与者是否要把事务真正提交.基于这个思想,衍生出了二阶段提交和三阶段提交两种协议.


#	一.	2PC

2PC,是Two-Phase Commit的缩写,即二阶段提交,是计算机网络尤其是在数据库领域内,为了使基于分布式系统架构下的所有节点在进行事务处理过程中能够保持原子性和一致性而设计的一种算法.通常,二阶段提交协议也被认为是一种一致性协议,用来保证分布式系统数据的一致性.目前,绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的,利用该协议能够非常方便地完成所有分布式事务参与者的协调,统一决定事务的提交或回滚,从而能够有效地保证分布式数据一致性,因此二阶段提交协议被广泛地应用在许多分布式系统中.

<font color="red">这里我补充一下,在mysql的innoDB存储引擎中,哪怕是单节点的,其内部通过redo log, undo log来实现事务的方式,也是属于一种两阶段提交的.</font>

##	一.1	协议说明

二阶段提交协议是将事务的提交过程分成了两个阶段来进行处理,其执行流程如下.

阶段一:提交事务请求

1.	事务询问.  
	协调者向所有的参与者发送事务内容,询问是否可以执行事务提交操作,并开始等待各参与者的响应.

2.	执行事务.  
	各参与者节点执行事务操作,并将Undo和Redo信息记入事务日志中.

3.	各参与者向协调者反馈事务询问的响应.  
	如果参与者成功执行了事务操作,那么就反馈给协调者Yes响应,表示事务可以执行;如果参与者没有成功执行事务,那么就反馈给协调者No响应,表示事务不可以执行.

由于上面讲述的内容在形式上近似是协调者组织各参与者对一次事务操作的投票表态过程,因此二阶段提交协议的阶段一也被称为"投票阶段",即各参与者投票表明是否要继续执行接下去的事务提交操作.


阶段二:执行事务提交

在阶段二中,协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作,正常情况下,包含以下两种可能.

**执行事务提交**

假如协调者从所有的参与者获得的反馈都是Yes响应,那么就会执行事务提交.

1.	发送提交请求  
	协调者向所有参与者节点发出Commit请求

2.	事务提交  
	参与者接收到Commit请求后,会正式执行事务提交操作,并在完成提交之后释放在整个事务执行期间占用的事务资源.

3.	反馈事务提交结果  
	参与者在完成事务提交之后,向协调者发送Ack消息.

4.	完成事务.
	协调者接收到所有参与者反馈的Ack消息后,完成事务.


**中断事务**

假如任何一个参与者向协调者反馈了No响应,或者在等待超时之后,协调者尚无法接收到所有参与者的反馈响应,那么就会中断事务.

1.	发送回滚请求  
	协调者向所有参与者节点发出Rollback请求

2.	事务回滚  
	参与者接收到Rollback请求后,会利用其在阶段一中记录的Undo信息来执行事务的回滚操作,并在完成回滚之后释放在整个事务执行期间占用的资源.

3.	反馈事务回滚结果  
	参与者在完成事务回滚之后,向协调者发送Ack消息.

4.	中断事务
	协调者接收到所有参与者反馈的Ack消息后,完成事务中断.

<br><br>

以上,就是二阶段提交过程中,前后两个阶段分别进行的处理逻辑.简单地讲,二阶段提交讲一个事务的处理过程分为了投票和执行两个阶段,其核心是对每个事务都采用先尝试后提交的处理方式,因此也可以将二阶段提交看作一个强一致性的算法,下面两图分别展示了二阶段提交过程中"事务提交"和"事务中断"两种场景下的交互流程.

[![3jyZRK.png](https://s2.ax1x.com/2020/03/07/3jyZRK.png)](https://imgchr.com/i/3jyZRK)

[![3jyuse.png](https://s2.ax1x.com/2020/03/07/3jyuse.png)](https://imgchr.com/i/3jyuse)


##	一.2	优缺点

二阶段提交协议的优点:原理简单,实现方便
二阶段提交协议的缺点:同步阻塞,单点问题,脑裂(网络分区),太过保守

**同步阻塞**

二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞,这会极大地限制分布式系统的性能.在二阶段提交的执行过程中,所有参与该事物操作的逻辑都处于阻塞状态,也就是说,各个参与者在等待其他参与者响应的过程中,将无法进行其他任何操作.

**单点问题**

协调者的角色在整个二阶段提交协议中起到了非常重要的作用.一旦协调者出现问题,那么整个二阶段提交流程将无法运转,更为严重的是,如果协调者是在阶段二中出现问题的话,那么其他参与者将会一直处于锁定事务资源的状态中,而无法继续完成事务操作.

**数据不一致**

在二阶段提交协议的阶段二,即执行事务提交的时候,当协调者向所有的参与者发送Commit请求之后,发生了局部网络异常或者是协调者在尚未发送完Commit请求时自身发生了崩溃,导致最终只有部分参与者收到了Commit请求.于是,这部分收到了Commit请求的参与者就会进行事务的提交,而其他没收到Commit请求的参与者则无法进行事务提交,于是整个分布式系统便出现了数据不一致性现象.

**太过保守**

如果在协调者指示参与者进行事务提交询问的过程中,参与者出现故障而导致协调者无法获取到所有参与者的响应信息的话,这是协调者只能依靠其自身的超时机制来判断是否需要中断事务,这样的策略显得比较保守.换句话说,二阶段提交协议没有设计较为完善容错机制,任意一个节点的失败都会导致整个事务的失败.



#	二.	3PC

上一节介绍了二阶段提交协议的设计和实现原理,并明确指出了其在实际运行过程中可能存在的诸如同步阻塞,协调者的单点问题,脑裂和太过保守的容错机制等缺陷,因此研究者在二阶段提交协议的基础上进行了改进,提出了三阶段提交协议.


##	二.1	协议说明

3PC,是Three-Phase Commit的缩写,即三阶段提交,是2PC的改进版,其将二阶段提交协议的"提交事务请求"过程一分为二,形成了有CanCommit,PreCommit和doCommit三个阶段组成的事务处理协议.

<font color="red">这块我补充一句,原书中的这句话我觉得说的不恰当,应该是在二阶段提交协议的投票阶段之前,加了一个阶段,先进行询问,然后第二阶段和第三阶段对应2PC中的两个阶段.</font>

其协议设计如下图:

![3xuoB4.png](https://s2.ax1x.com/2020/03/08/3xuoB4.png)


阶段一:	CanCommit

1.	事务询问.  
	协调者向所有的参与者发送一个包含事务内容的canCommit请求,询问是否可以执行事务提交操作,并开始等待各参与者的响应.

2.	各参与者向协调者反馈事务询问的响应.  
	参与者在接收到来自协调者的canCommit请求后,正常情况下,如果其自身认为可以顺利执行事务,那么会反馈Yes响应,并进入预备状态,否则反馈No响应.


阶段二:	PreCommit

在阶段二中,协调者会根据各参与者的反馈情况来决定是否可以进行事务的PreCommit操作,正常情况下,包含两种可能.

**执行事务预提交**

1.	发送预提交请求  
	协调者向所有参与者节点发出preCommit的请求,并进入Prepared阶段.

2.	事务预提交  
	参与者接收到preCommit请求后,会执行事务操作,并将Undo和Redo信息记录到事务日志中

3.	各参与者向协调者反馈事务执行的响应  
	如果参与者成功执行了事务操作,那么就会反馈给协调者Ack响应,同时等待最终的指令:提交(commit)或中止(abort).


**中断事务**

假如任何一个参与者向协调者反馈了No响应,或者在等待超时之后,协调者尚无法接收到所有参与者的反馈响应,那么就会中断事务.

1.	发送中断请求  
	协调者向所有参与者节点发出abort请求

2.	中断事务  
	无论是收到来自协调者的abort请求,或者是在等待协调者请求过程中出现超时,参与者都会中断事务.


阶段三:	doCommit

该阶段将进行真正的事务提交,会存在以下两种可能的情况.

**执行提交**

1.	发送提交请求  
	进入这一阶段,假设协调者处于正常工作状态,并且它接收到了来自所有参与者的Ack响应,那么它将从"预提交"状态转换到"提交"状态,并向所有的参与者发送doCommit请求.

2.	事务提交  
	参与者接收到doCommit请求后,会正式执行事务提交操作,并在完成提交之后释放在整个事务执行期间占用的事务资源.

3.	反馈事务提交结果  
	参与者在完成事务提交之后,向协调者发送Ack消息

4.	完成事务  
	协调者接收到所有参与者反馈的Ack消息后,完成事务


**中断事务**

进入这一阶段,假设协调者处于正常工作状态,并且有任意一个参与者向协调者反馈了No响应,或者在等待超时之后,协调者尚无法接收到所有参与者的反馈响应,那么就会中断事务.

1.	发送中断请求  
	协调者向所有的参与者节点发送abort请求

2.	事务回滚  
	参与者接收到abort请求后,会利用其在阶段二中记录的Undo信息来执行事务回滚操作,并在完成回滚之后释放在整个事务执行期间占用的资源.

3.	反馈事务回滚结果  
	参与者在完成事务回滚之后,向协调者发送Ack消息.

4.	中断事务  
	协调者接收到所有参与者反馈的Ack消息后,中断事务.

需要注意的是,一旦进入阶段三,可能会存在以下两种故障.

*	协调者出现问题
*	协调者和参与者之间的网络出现故障

无论出现哪种情况,最终都会导致参与者无法及时接收到来自协调者的doCommit或是abort请求,针对这样的异常情况,参与者都会在等待超时之后,继续进行事务提交.


##	二.2	优缺点

三阶段提交协议的优点:相较于二阶段提交协议,三阶段提交协议最大的优点就是降低了参与者的阻塞范围,并能够在出现单点故障后继续达成一致.

<font color="red">这里补充一些我的理解,为什么说三阶段提交协议降低了参与者的阻塞范围呢?<br>

二阶段提交协议第一阶段也就是投票阶段,就是参与者将事务内容写入Redo和Undo,这时候是有很大概率存在某个参与者节点无法执行操作的.<br>

三阶段提交协议中,先事先进行了一次CanCommit的询问,后面才是preCommit和doCommit,这就大大缩小了某个参与者节点不能执行事务再进行各参与者节点回滚的概率,因为已经预先问过一次是否可以执行了.<br>

2PC事务资源锁定是从投票阶段将事务内容发给各个参与者节点,参与者节点写Redo和Undo开始,到整个事务结束,也就是执行阶段完成.<br>

3PC事务资源锁定是从preCommit到doCommit,也是从将事务内容发给各个参与者节点进行Redo和Undo的写入开始,到doCommit完成.<br>

可以发现2PC和3PC其实都是锁了两个阶段,但是3PC发生参与者几点不能执行从而造成回滚的概率更低,因此说其降低了参与者阻塞范围.
</font>


三阶段提交协议的缺点:三阶段提交协议在去除阻塞的同时也引入了新的问题,那就是参与者接收到preCommit消息后,如果网络出现分区,此时协调者所在的节点和参与者无法进行正常的网络通信,在这种情况下,该参与者依然会进行事务的提交,这必然出现数据的不一致性.

<font color="red">这里我总结一句,在3PC中:<br>

第二阶段发生网络分区,参与者收不到协调者的请求信息,超时后会回滚事务.<br>

第三阶段发生网络分区,参与者收不到协调者的请求信息,超时后会提交事务.<br>

为什么第3阶段发生网络分区,超时后参与者节点提交事务呢? 我理解是为了解决2PC过于保守的缺点.其实此时收不到协调者的信息,更大概率是发生了网络分区(当然,这时候无论是doCommit信息还是abort信息,参与者都收不到,但是极大概率应该是doCommit信息),且大概率是事务可以提交的,因此这里超时后执行事务提交.但是若真是网络分区的时候,本该由协调者发过来的信息是abort的话,那么此时就会出现数据不一致性.因此,这个点是个利弊权衡取舍之后的方案,若真是出现了不一致,那么就通过人工修改数据或其他办法解决吧,毕竟这种情况极少极少.

<br>
<br>

最后再说一句,无论是2PC还是3PC,都没法保证100%的可靠.

</font>