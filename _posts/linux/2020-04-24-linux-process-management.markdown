---
layout:     post
title:      "linux--process management"
date:       2020-04-24 18:00:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - linux

---

> 摘自: Linux内核设计与实现


#	进程(Process)

进程(process)就是出于执行期的程序(目标代码存放在某种存储介质上).但进程并不仅仅局限于一段可执行程序代码.通常进程还要包括其他资源,像打开的文件,挂起的信号,内核内部数据,处理器状态,一个或多个具有内存映射的内存地址空间及一个或多个执行线程,当然还包括用来存放全局变量的数据段等.实际上,进程就是正在执行的程序代码的实时结果.内核需要有效而又透明地管理所有细节.

执行线程,简称线程(thread),是在进程中活动的对象.每个线程都拥有一个独立的程序计数器,进程栈和一组进程寄存器.

**<font color="red">内核调度的对象时线程,而不是进程</font>**

在传统的Unix系统中,一个进程只包含一个线程,但现在的系统中,多线程程序非常普遍.linux并不区分线程和进程,对于linux来说,线程只不过是一种特殊的进程.

**<font color="red">程序本身并不是进程,进程是处于执行期的程序以及相关的资源的总称.</font>**

进程在创建它的时刻开始存活.**<font color="red">在linux中,通常是通过fork()这一系统调用来创建新进程的,它通过复制一个已存在的进程来创建新进程</font>**.调用fork()的进程称为父进程,新进程称为子进程.当该调用结束时,在返回点这个相同位置上,父进程恢复执行,子进程开始执行.fork()系统调用从内核返回两次:一次回到父进程,另一次回到新产生的子进程.

通常,创建新的进程都是为了立即执行新的,不同的程序,而接着调用exec()这组函数就可以创建新的地址空间,并把新的程序载入其中.在现代linux内核中,fork()实际上是通过clone()系统调用来实现的.

最后,程序通过exit()系统调用退出执行.这个函数会终结进程并将占用的资源释放掉.父进程可以通过wait4()系统调用查询子进程是否终结,这其实使得进程拥有了等待特定进程执行完毕的能力.进程退出执行后被设置为将死状态,知道它的父进程调用wait()或者waitpid()为止.