---
layout:     post
title:      "linux--process scheduling"
date:       2020-04-24 18:00:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - linux

---

> 摘自: Linux内核设计与实现


#	多任务

多任务系统可以划分为两类:

*	非抢占式多任务(cooperative multitasking)
*	抢占式多任务(preemptive multitasking)

linux属于抢占式的多任务模式.在此模式下,由调度程序来决定什么时候停止一个进程的运行,以便其他进程能够得到执行机会.这个强制的挂起动作就叫做抢占.进程在被抢占之前能够运行的时间是预先设置好的,而且有一个专门的名字,叫做进程时间片(timeslice).时间片实际上就是分配给每个可运行进程的处理器时间段.有效管理时间片能使调度程序从系统全局的角度做出调度决定,这样做还可以避免个别进程独占系统资源.当今众多现代操作系统对程序运行都采用了动态时间片计算的方式,并且引入了可配置的计算策略.

相反,在非抢占式多任务模式下,除非进程自己主动停止运行,否则它会一直执行.进程主动挂起自己的操作称为让步(yielding).理想情况下,进程通常会做出让步,以便让每个可运行进程享有足够的处理器时间.但这种机制有很多缺点:调度程序无法对每个进程该执行多长时间做出统一规定,所以进程独占的处理器时间可能超出用户的预料;更糟的是,一个绝不做出让步的挂起进程可能会使系统崩溃.



#	linux的进程调度

linux2.4及其以前版本中内核中,调度程序相当简陋,设计原始,各种场景难以胜任.

linux2.5版本内核,对调度程序作了大手术.开始采用一种叫做O(1)调度程序的新调度程序----因其算法的行为而得名.它解决了先前版本linux调度程序的许多不足,引入了许多强大的新特性和性能特征.这里主要归功于静态时间片算法和针对每一处理器的运行队列.

O(1)调度器在数十量级(不是数百量级)的多处理器的环境下尚能表现出近乎完美的性能和可扩展性,但该调度算法对于那些响应时间敏感的程序方面有不足.这些程序我们称其为交互进程----它无疑包括了所有需要用户交互的程序.

linux2.6版本内核中,为了提高对交互程序的调度性能引入了新的进程调度算法.其中最著名的是"反转楼梯最后期限调度算法",该算法吸收了队列理论,将公平调度的概念引入了linux调度程序.并最终在2.6.23内核版本中替代了O(1)调度算法,它此刻被称为"完全公平调度算法",简称CFS



#	策略

策略决定调度程序在何时让什么进程运行.调度器的策略往往就决定系统的整体印象,并且,还要负责优化使用处理器时间.无论从哪个方面来看,他都是至关重要的.


####	I/O消耗型和处理器消耗型的进程

进程可以被分为I/O消耗型和处理器消耗型.

I/O消耗型指进程的大部分时间用来提交I/O请求或是等待I/O请求.因此,这样的进程经常处于可运行状态,但通常都是运行短短的一会儿,因为它在等待更多的I/O请求时总会阻塞(这里所说的I/O是指任何类型的可阻塞资源,比如键盘输入,或者是网络I/O).

处理器消耗型进程把时间大多用在执行代码上.除非被抢占,否则他们通常都一直不停地运行,因为他们没有太多的I/O需求.但是,因为他们不属于I/O驱动类型,所以从系统响应速度考虑,调度器不应该经常让他们运行.对于这类处理器消耗型的进程,调度策略往往是尽量降低他们的调度频率,而延长其运行时间.

调度策略通常要在两个矛盾的目标中寻找平衡:进程响应迅速(响应时间短)和最大系统利用率(高吞吐量).为了满足上述需求,调度程序通常采用一套非常复杂的算法来决定最值得运行的进程投入运行,但是它往往并不保证低优先级进程会被公平对待.linux更倾向于有限调度I/O消耗型进程.虽然如此,调度程序也并未忽略处理器消耗型的进程.


####	进程优先级

调度算法中最基本的一类就是基于优先级的调度.这是一种根据进程的价值和其对处理器时间的需求来对进程分级的思想.通常做法是(其并未被linux系统完全采用)优先级高的进程先运行,低的后运行,相同优先级的进程按轮转方式进行调度(一个接一个,重复进行).在某些系统中,优先级高的进程使用的时间片也较长.调度程序总是选择时间片未用尽而且优先级最高的进程运行.用户和系统都可以通过设置进程的优先级来影响系统的调度.

linux采用了两种不同的优先级范围:
*	nice值----范围是从-20到+19,默认为0.越大的nice值意味着更低的优先级.
*	实时优先级----其值是可配置的,默认情况下它的变化范围是从0到99(包括0和99).越高的实时优先级数值意味着进程优先级越高.



#	时间片