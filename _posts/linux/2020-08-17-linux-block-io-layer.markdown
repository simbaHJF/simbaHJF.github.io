---
layout:     post
title:      "linux block io layer"
date:       2020-08-17 10:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - linux

---

> 摘自: Linux内核设计与实现




系统中能够随机(不需要按顺序)访问固定大小数据片(chunks)的硬件设备称作块设备,这些固定大小的数据片就称作块. 最常见的块设备是硬盘.

另一种基本的设备类型是字符设备.字符设备按照字符流的方式被有序访问,像串口和键盘就属于字符设备.

如果一个硬件设备是以字符流的方式被访问的话,那就应该将它归于字符设备;反过来,如果一个设备是随机(无序)访问的,那么它就属于块设备.




#	块设备中的一些基本概念


####	扇区

块设备中最小的可寻址单元是扇区.扇区大小一般是2的整数倍,而最常见的是512字节.扇区的大小是设备的物理属性,扇区是所有块设备的基本单元----块设备无法对比它还小的单元进行寻址和操作,尽管许多块设备能够一次对多个扇区进行操作.


####	块

因为各种软件的用途不同,所以他们都会用到自己的最小逻辑可寻址单元----块.块是文件系统的一种抽象----只能基于块来访问文件系统.虽然物理裁判寻址是按照扇区级进行的,但是内核执行的所有磁盘操作都是按照块进行的.由于扇区是块设备的最小可寻址单元,所以块不能比扇区还小,只能数倍于扇区大小.另外,内核(对有扇区的硬件设备)还要求块大小是2的整数倍,而且不能超过一个页的长度.所以,对块大小的最终要求是,必须是扇区大小的2的整数倍,并且要小于页面大小.所以通常块大小是512字节,1KB或4KB.


####	缓冲区

当一个块被调入内存时(也就是说,在读入或者等待写出时),它要存储在一个缓冲区中.每个缓冲区与一个块对应,它相当于是磁盘块在内存中的表示.块包含一个或多个扇区,但大小不能超过一个页面,所以一个页可以容纳一个或多个内存中的块.

**内存管理的基本单元是页,因此,一个内存中的一个页,可以存放多个缓冲区**

![QjY3RA.png](https://s2.ax1x.com/2019/12/21/QjY3RA.png)




#	bio结构体

内核中块I/O操作的基本容器由bio结构体表示.该结构体代表了正在现场的(活动的)以片段(segment)链表形式组织的块I/O操作.一个片段是一小块连续的内存缓冲区.这样的话,就不需要保证单个缓冲区一定要连续.所以通过用片段来描述缓冲区,即使一个缓冲区分散在内存的多个位置上,bio结构体也能对内核保证I/O操作的执行.

**可以理解为,一个bio结构体代表对一个块的I/O操作,这个I/O操作中涉及到多个片段,这些片段在bio结构体中,以一个片段链表的形式组织,链表中每个元素会记录片段对应的各个信息,包括所在page,offset,length等.这样,一个缓冲区(对应块设备的一个块)就可以分散在内存的多个位置上(以各个片段的方式)**




#	I/O请求队列

块设备将他们挂起的块I/O请求保存在请求队列中,该队列由request_queue结构体表示,包含一个双向请求链表以及相关控制信息.通过内核中像文件系统这样高层的代码将请求加入到队列中.请求队列只要不为空,队列对应的块设备驱动程序就会从队列头获取请求,然后将其送入对应的块设备上去.请求队列表中的每一项都是一个单独的请求,由request结构体表示.

因为一个请求可能要操作多个连续的磁盘块,所以每个请求可以由多个bio结构体组成.注意,虽然磁盘上的块必须连续,但是在内存中这些块并不一定要连续----每个bio结构体都可以描述多个片段,而每个请求也可以包含多个bio结构体.




#	I/O调度程序

如果简单地以内核产生请求的次序直接将请求发向块设备的话,性能肯定让人难以接受.磁盘寻址是整个计算机中最慢的操作之一,每一次寻址需要花费不少时间.所以尽量缩短寻址时间无疑是提高系统性能的关键.

为了优化寻址操作,内核既不会简单地按照请求接受次序,也不会立即将其提交给磁盘.相反,它会在提交前,先执行名为合并与排序的预操作,这种预操作可以极大地提高系统的整体性能.在内核中负责提交I/O请求的子系统称为I/O调度程序.I/O调度程序将磁盘I/O资源分配给系统中所有挂起的块I/O请求,这种资源分配是通过将请求队列中挂起的请求合并和排序来完成的.

I/O调度程序的工作是管理块设备的请求队列.它决定队列中的请求排列顺序以及在什么时刻派发到块设备.这样做有利于减少磁盘寻址时间,从而提高全局吞吐量.注意,全局这个定语很重要,坦率的讲,一个I/O调度器可能为了提高系统整体性能,而对某些请求不公平.

I/O调度程序通过两种方法减少磁盘寻址时间:合并与排序.I/O调度程序称作电梯调度.

总体来讲,当一个请求加入到队列中时,有可能发生四种操作,他们依次是:

*	如果队列中已存在一个对相邻磁盘区操作的请求,那么新请求将和这个已经存在的请求合并成一个请求
*	如果队列中存在一个驻留时间过长的请求,那么新请求将被插入到队列尾部,以防止其他旧的请求饥饿发生
*	如果队列中以扇区方向为序存在合适的插入位置,那么新的请求将被插入到该位置,保证队列中的请求是以被访问磁盘物理位置为序进行排列的
*	如果队列中不存储在合适的请求插入位置,请求将被插入到队列尾部