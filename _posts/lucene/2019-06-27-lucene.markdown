---
layout:     post
title:      "Lucene简介"
date:       2019-06-17 13:30:00 +0800
author:     "simba"
header-img: "img/post-bg-miui6.jpg"
tags:
    - lucene

---


##	一.总论

根据[http://lucene.apache.org/core/index.html](http://lucene.apache.org/core/index.html)的定义:Lucene是一个搞笑的,基于Java的全文检索库.所以在了解Lucene之前先来了解一下什么是全文检索.<br>

我们常用的数据总体分成两种:结构化数据和非结构化数据.
*	结构化数据: 指具有固定格式或有限长度的数据,如数据库,元数据等.
*	非结构化数据:	指不定长或无固定格式的数据,如邮件,word文档等.
<br>

当然有的地方还有提到第三种,半结构化数据,如XML,HTML等,根据需要可按结构化数据来对其进行处理,也可抽取出纯文本按非结构化数据来处理.<br>


按照数据的分类,搜索数据页分为两种:
*	对结构化数据的搜索:如对关系型数据库的搜索,用SQL语句等
*	对非结构化数据的搜索(也就是全文检索):如利用windows的搜索可以搜索文件内容;Linux下的grep命令;Google和百度搜索大量内容数据.
<br>

对非结构化数据的搜索主要有两种方法:<br>

一种是顺序扫描法.所谓顺序扫描法,就是当要查找内容包含某一个字符串的文件,就一个文档一个文档的进行查找,对于每个文档,从头查找到尾,如果此文档包含该字符串,则此文档为我们要找的文件,接着对下一个文档进行查找,直到扫描完所有的文件.这种方法比较原始,但对于小数据量的文件,这种方式还是最直接方便的.但是对于大量的文件,这种方式会相当的慢.<br>

另一种便是全文检索技术.全文检索的基本思路是,将非结构化数据中的一部分信息提取出来,重新组织,使其变得有一定的结构,然后对此有一定结构的数据进行搜索,从而达到搜索相对较快的目的.这部分从非结构化数据中提取出的然后重新组织的信息,称之为索引.类比字典的查找过程,先通过拼音索引找到对应字的页,进而找到字相关的解释文档.<br>

这种先建立索引,再对索引进行搜索的过程就称为全文检索.下面的图来自<<Lucene in action>>,但却不仅仅描述了Lucene的检索过程,而是描述了全文检索的一般过程.
![Z3KQqP.png](https://s2.ax1x.com/2019/06/30/Z3KQqP.png)

全文检索大体分为两个过程,索引创建和搜索索引.
*	索引创建:	将现实世界中所有的结构化和非结构化数据提取信息,创建索引的过程.
*	搜索索引:	就是得到用户的查询请求,搜索创建的索引,然后返回结果的过程.
<br>

于是全文检索就存在三个重要问题:
*	索引里面存什么数据?(Index)
*	如何创建索引?(Indexing)
*	如何对索引进行搜索?(Search)
<br>

下面将对这三个问题进行进一步研究.<br>


##	二,索引里面存什么数据

顺序扫描速度慢的原因是:我们想要搜索的信息和非结构化数据中存储的信息不一致.非结构化数据中所存储的信息是每个文件包含那些字符串,即已知文件,欲求字符串相对容易,是一种从文件到字符串的映射.而我们想要搜索的信息是那些文件包含给定字符串,即已知字符串,欲求文件的过程,是一种从字符串到文件的映射.两者恰恰相反.因此,如果索引总能够保存从字符串到文件的映射,则会大大提高搜索速度.由于从字符串到文件的映射是文件到字符串映射的反向过程,于是保存这种信息的索引称为反向索引(倒排索引).<br>

反向索引所保存的信息一般如下:<br>

假设我的文档集合里面有100篇文档,为了方便表示,我们为文档从1到100进行编号,得到下面的结构:
![Z3lMrR.png](https://s2.ax1x.com/2019/06/30/Z3lMrR.png)

左边保存的是一系列字符串,称为词典.每个字符串都指向包含此字符串的文档链表,此文档链表称为倒排表.有了倒排索引,便使保存到信息和要搜索的信息一致了,可以大大加快搜索的速度.比如当需要查找既包含字符串"lucene"又包含字符串"solr"的文档,只需要以下几步:
*	取出包含字符串"lucene"的文档链表
*	取出包含字符串"solr"的文档链表
*	通过合并链表,找出既包含"lucene"又包含"solr"的文件.
<br>

过程如下图所示:
![Z3lXLR.png](https://s2.ax1x.com/2019/06/30/Z3lXLR.png)

由此可见,全文检索有一个预先建立索引的过程,如果索引的数据量很大,创建索引的过程也会相对较慢,但创建索引的过程只需要一次,以后的查询过程就只需要搜索创建好的索引就可以了.这也是全文检索相对于顺序扫描的又是之一:一次索引,多次使用.<br>


##	三.如何创建索引
全文检索的索引创建过程一般有以下几步:<br>

第一步:一些要索引的原文档(Document).<br>

为了方便说明索引的创建过程,这里特意用两个文件为例:<br>

文件一:Students should be allowed to go out with their friends, but not allowed to drink beer.<br>

文件二：My friend Jerry went to school to see his students but found them drunk which is not allowed.<br>

第二步:将原文档传给分词组件(Tokenizer)<br>

分词组件(Tokenizer)会做以下几件事情(此过程称为Tokenize):<br>

1.将文档分成一个一个单独的词.<br>

2.去除标点符号<br>

3.去除听此(Stop word).<br>

所谓停词(Stop word)就是一种语言中最普通的一些单词,由于没有特别的意义,因而大多数情况下不能成为搜索的关键词,因而创建索引时,这种词会被去掉而减少索引的大小.英语中停词如:"the","a","this"等.对于每一种语言的分词组件,都有一个停词集合.<br>

经过分词后得到的结果称为词元(Token).在我们的例子中,便得到以下词元(Token):"Students","allowed","go","their","friends","allowed","drink","beer","My","friend","Jerry","went","school","see","his","students","found","them","drunk","allow".<br>

第三步:将得到的词元(Token)传给语言处理组件(Linguistic Processor).<br>

语言处理组件主要是对得到的词元做一些同语言相关的处理.对于英语,语言处理组件一般做以下几点:<br>

*	变为小写
*	将单词缩减为词根形式,如"cars"到"car"等.这种操作称为:stemming.
*	将单词转变为词根形式,如"drove"到"drive"等.这种操作称为:lemmatization.
<br>

语言处理组件的结果称为词(Term).<br>

在我们的例子中,经过语言处理,得到的词(Term)如下:"student","allow","go","their","friend","allow","drink","beer","my","friend","jerry","go","school","see","his","student","find","them","drink","allow".也正是因为有语言处理的步骤,才能使搜索drove,而drive也能被搜索出来.<br>

第四步:将得到的词(Term)传给索引组件(Indexer).<br>

索引组件(Indexer)主要做以下几件事情:<br>

1.利用得到的词(Term)创建一个字典.<br>

在我们的例子中字典如下:

Term | Document ID |
-|-|
student | 1 |
allow | 1 |
go | 1 |
their | 1 |
friend | 1 |
allow | 1 |
drink | 1 |
beer | 1 |
my | 2 |
friend | 2 |
jerry | 2 |
go | 2 |
school | 2 |
see | 2 |
his | 2 |
student | 2 |
find | 2 |
them | 2 |
drink | 2 |
allow | 2 |

<br>

2.对字典按字母顺序进行排序.
Term | Document ID |
-|-|
allow | 1 |
allow | 1 |
allow | 2 |
beer | 1 |
drink | 1 |
drink | 2 |
find | 2 |
friend | 1 |
friend | 2 |
go | 1 |
go | 2 |
his | 2 |
jerry | 2 |
my | 2 |
school | 2 |
see | 2 |
student | 1 |
student | 2 |
their | 1 |
them | 2 |

<br>

3.合并相同的词(Term)成为文档倒排(Posting List)链表.
![ZGZdln.png](https://s2.ax1x.com/2019/07/01/ZGZdln.png)

在此表中,有几个定义:<br>
*	Document Frequency即文档频次,表示总共有多少文件包含此词(Term)
*	Frequency即词频率,表示此文件中包含了几个此词(Term)
<br>

所以对词(Term)"allow"来讲,总共有两篇文档包含此词,从而词后面的文档链表总共有两项,第一项表示包含"allow"的第一篇文档,即1号文档,此文档中,"allow"出现了2次,第二项表示包含"allow"的第二个文档,是2号文档,此文档中,"allow"出现了1次.<br>

到这里,索引已经创建好了,我们可以通过它很快的找到我们想要的文档.而且在此过程中,我们搜索"drive","driving","drove","driven"也能够被搜到.因为在我们的索引中,"driving","drove","driven"都会经过语言处理而变成"drive".<br>

在搜索时,如果输入"driving",输入的查询语句同样经过我们这里的一到三步,从而变为查询"drive",从而可以搜索到想要的文档.